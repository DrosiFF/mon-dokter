generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  role      Role
  email     String   @unique
  createdAt DateTime @default(now())
  patient   Patient?
  doctor    Doctor?
}

model Patient {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  firstName String
  lastName  String
  phone     String?
  appointments Appointment[]
}

model Doctor {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  slug      String   @unique
  firstName String
  lastName  String
  bio       String?
  clinicId  String?
  clinic    Clinic?  @relation(fields: [clinicId], references: [id])
  specialties SpecialtyOnDoctor[]
  slots     AvailabilitySlot[]
  appointments Appointment[]
  ratingAvg Float?   @default(4.8)
}

model Clinic {
  id       String  @id @default(cuid())
  name     String
  address  String
  cityId   String
  city     City    @relation(fields: [cityId], references: [id])
  doctors  Doctor[]
  tz       String  @default("Indian/Mahe")
}

model City {
  id      String  @id @default(cuid())
  name    String
  country String  @default("IT") // set "SC" if Seychelles instances later
  clinics Clinic[]
}

model Specialty {
  id    String  @id @default(cuid())
  name  String  @unique
  slug  String  @unique
  doctors SpecialtyOnDoctor[]
}

model SpecialtyOnDoctor {
  doctorId    String
  specialtyId String
  doctor      Doctor    @relation(fields: [doctorId], references: [id])
  specialty   Specialty @relation(fields: [specialtyId], references: [id])
  @@id([doctorId, specialtyId])
}

model AvailabilitySlot {
  id        String   @id @default(cuid())
  doctorId  String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  start     DateTime // UTC
  end       DateTime // UTC
  capacity  Int      @default(1)
  booked    Int      @default(0)
  appointments Appointment[]
  @@index([doctorId, start])
}

model Appointment {
  id         String            @id @default(cuid())
  patientId  String
  doctorId   String
  slotId     String
  status     AppointmentStatus @default(PENDING)
  reason     String?
  createdAt  DateTime          @default(now())
  patient    Patient           @relation(fields: [patientId], references: [id])
  doctor     Doctor            @relation(fields: [doctorId], references: [id])
  slot       AvailabilitySlot  @relation(fields: [slotId], references: [id])
  @@index([doctorId, createdAt])
}