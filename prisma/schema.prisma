generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PROVIDER
  STAFF
  USER
}

enum BookingStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
  COMPLETED
}

model Profile {
  id        String   @id @default(uuid())
  authId    String   @unique // Clerk user id
  role      Role     @default(USER)
  phone     String?
  name      String?
  email     String?
  provider  Provider?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clinic {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  address   String?
  phone     String?
  logoUrl   String?
  island    String?  // Seychelles specific
  providers Provider[]
  services  Service[]
  pharmacyProducts PharmacyProduct[]
  integrations Integration[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Provider {
  id         String   @id @default(uuid())
  profileId  String   @unique
  clinicId   String?
  bio        String?
  specialties String? // JSON string of specialties array
  slug       String   @unique
  profile    Profile  @relation(fields: [profileId], references: [id])
  clinic     Clinic?  @relation(fields: [clinicId], references: [id])
  services   Service[]
  bookings   Booking[]
  integrations Integration[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  clinicId    String?
  providerId  String?
  name        String
  description String?
  durationMin Int      @default(30)
  price       Decimal  @db.Decimal(10,2)
  isActive    Boolean  @default(true)
  clinic      Clinic?  @relation(fields: [clinicId], references: [id])
  provider    Provider? @relation(fields: [providerId], references: [id])
  bookings    Booking[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PharmacyProduct {
  id        String   @id @default(uuid())
  clinicId  String?
  name      String
  sku       String?  @unique
  price     Decimal  @db.Decimal(10,2)
  stock     Int      @default(0)
  category  String?
  description String?
  imageUrl  String?
  isActive  Boolean  @default(true)
  clinic    Clinic?  @relation(fields: [clinicId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id            String        @id @default(uuid())
  simplybookId  String?       @unique // SimplyBook booking ID
  serviceId     String
  providerId    String
  clientName    String
  clientEmail   String?
  clientPhone   String?
  start         DateTime
  end           DateTime
  status        BookingStatus @default(PENDING)
  notes         String?
  service       Service       @relation(fields: [serviceId], references: [id])
  provider      Provider      @relation(fields: [providerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Integration {
  id          String   @id @default(uuid())
  providerId  String?
  clinicId    String?
  type        String   // 'simplybook', 'cal.com', etc.
  company     String?  // SimplyBook company alias
  apiUser     String?
  apiKey      String?
  isActive    Boolean  @default(true)
  provider    Provider? @relation(fields: [providerId], references: [id])
  clinic      Clinic?   @relation(fields: [clinicId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}